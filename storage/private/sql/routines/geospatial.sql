-- MySQL extended geospatial routines
-- Author: Julio María Meca Hansen <julio@meca-innotech.com>

-- bootstrapping
DROP FUNCTION IF EXISTS F_DISTANCE_TO_CENTROID;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_CENTROID_IN_DAYS;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_CENTROID_IN_HOURS;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_CENTROID_IN_MINUTES;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_POINT;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_POINT_IN_DAYS;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_POINT_IN_HOURS;
DROP FUNCTION IF EXISTS F_DISTANCE_TO_POINT_IN_MINUTES;
DROP FUNCTION IF EXISTS F_INSIDE_CIRCLE;
DROP FUNCTION IF EXISTS F_INSIDE_POLYGON;
DROP FUNCTION IF EXISTS F_NEAR_CENTROID;
DROP FUNCTION IF EXISTS F_NEAR_POINT;
DROP FUNCTION IF EXISTS F_POINT_FROM_COORDINATES;

-- F_DISTANCE_TO_CENTROID
-- determine the distance (in meters) between a given point and the centroid of a given geometry
CREATE FUNCTION F_DISTANCE_TO_CENTROID(p POINT, g GEOMETRY) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(p, ST_CENTROID(g));

-- F_DISTANCE_TO_CENTROID_IN_DAYS
-- determine the distance (in days) between a given point and the centroid of a given geometry
CREATE FUNCTION F_DISTANCE_TO_CENTROID_IN_DAYS(p POINT, g GEOMETRY, s DOUBLE) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(p, ST_CENTROID(g)) / (s * 86400);

-- F_DISTANCE_TO_CENTROID_IN_HOURS
-- determine the distance (in hours) between a given point and the centroid of a given geometry
CREATE FUNCTION F_DISTANCE_TO_CENTROID_IN_HOURS(p POINT, g GEOMETRY, s DOUBLE) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(p, ST_CENTROID(g)) / (s * 3600);

-- F_DISTANCE_TO_CENTROID_IN_MINUTES
-- determine the distance (in minutes) between a given point and the centroid of a given geometry
CREATE FUNCTION F_DISTANCE_TO_CENTROID_IN_MINUTES(p POINT, g GEOMETRY, s DOUBLE) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(p, ST_CENTROID(g)) / (s * 60);

-- F_DISTANCE_TO_POINT
-- determine the distance (in meters) between two given points
CREATE FUNCTION F_DISTANCE_TO_POINT(a POINT, b POINT) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(a, b);

-- F_DISTANCE_TO_POINT_IN_DAYS
-- determine the distance (in minutes) between two given points
CREATE FUNCTION F_DISTANCE_TO_POINT_IN_DAYS(a POINT, b POINT, s DOUBLE) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(a, b) / (s * 86400);

-- F_DISTANCE_TO_POINT_IN_HOURS
-- determine the distance (in minutes) between two given points
CREATE FUNCTION F_DISTANCE_TO_POINT_IN_HOURS(a POINT, b POINT, s DOUBLE) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(a, b) / (s * 3600);

-- F_DISTANCE_TO_POINT_IN_MINUTES
-- determine the distance (in minutes) between two given points
CREATE FUNCTION F_DISTANCE_TO_POINT_IN_MINUTES(a POINT, b POINT, s DOUBLE) RETURNS DOUBLE
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(a, b) / (s * 60);

-- F_INSIDE_CIRCLE
-- determine whether a given point is inside a circle centered at a specific given point and with a given radius
CREATE FUNCTION F_INSIDE_CIRCLE(p POINT, c POINT, r DOUBLE) RETURNS BOOLEAN
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(p, c) <= r;

-- F_INSIDE_POLYGON
-- determine whether a given point is inside a polygon defined by a given geometry
CREATE FUNCTION F_INSIDE_POLYGON(p POINT, g GEOMETRY) RETURNS BOOLEAN
DETERMINISTIC
RETURN ST_WITHIN(p, g);

-- F_NEAR_CENTROID
-- determine whether a given point is near the centroid of a given geometry by a given threshold (in meters)
CREATE FUNCTION F_NEAR_CENTROID(p POINT, g GEOMETRY, t DOUBLE) RETURNS BOOLEAN
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(p, ST_CENTROID(g)) <= t;

-- F_NEAR_POINT
-- determine whether a given point is close to another point by a given threshold (in meters)
CREATE FUNCTION F_NEAR_POINT(a POINT, b POINT, t DOUBLE) RETURNS BOOLEAN
DETERMINISTIC
RETURN ST_DISTANCE_SPHERE(a, b) <= t;

-- F_POINT_FROM_COORDINATES
-- returns a point from a pair of spatial coordinates (latitude and longitude)
CREATE FUNCTION F_POINT_FROM_COORDINATES(a DOUBLE, b DOUBLE) RETURNS POINT
DETERMINISTIC
RETURN POINT(a, b);
